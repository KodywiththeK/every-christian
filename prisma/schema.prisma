// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  gratitude     GratitudeJournal[]
  prayers       Prayer[]
  challenges    UserChallenge[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GratitudeJournal {
  id        String   @id @default(cuid())
  content   String   @db.Text
  date      DateTime
  isPublic  Boolean  @default(false)
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Prayer {
  id           String   @id @default(cuid())
  title        String
  content      String   @db.Text
  isAnswered   Boolean  @default(false)
  isPublic     Boolean  @default(false)
  startDate    DateTime @default(now())
  answeredDate DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  category     String
  difficulty   String
  duration     Int
  startDate    DateTime
  endDate      DateTime
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creatorId    String
  participants UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(cuid())
  progress    Int       @default(0)
  startDate   DateTime  @default(now())
  lastCheckIn DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?
  userId      String
  challengeId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

model ChallengeTask {
  id          String   @id @default(cuid())
  day         Int
  title       String
  description String?
  date        DateTime
  challengeId String
  completions UserTaskCompletion[]
}

model UserTaskCompletion {
  id            String       @id @default(cuid())
  completedAt   DateTime     @default(now())
  userId        String
  taskId        String
  challengeTask ChallengeTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
}

